<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DefinedRisk.PyRunnerX</name>
    </assembly>
    <members>
        <member name="T:DefinedRisk.PyRunnerX.PythonBase64ImageConverter">
            <summary>
            Helper class for converting a base64 string (as printed by
            python script) to a <see cref="T:SixLabors.ImageSharp.Image"/> image.
            </summary>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.PythonBase64ImageConverter.FromPythonBase64String(System.String)">
            <summary>
            Converts a base64 string (as printed by python script) to an ImageSharp <see cref="T:SixLabors.ImageSharp.Image"/>.
            </summary>
        </member>
        <member name="T:DefinedRisk.PyRunnerX.PythonRunner">
            <summary>
            A specialized runner for python and python scripts. Supports textual output
            as well as image output, both synchronously and asynchronously.
            </summary>
            <remarks>
            You can think of <see cref="T:DefinedRisk.PyRunnerX.PythonRunner"/> instances as <see cref="T:System.Diagnostics.Process"/>
            instances that were specialized for Python and Python scripts. The python interpreter
            (and launcher for windows) can also be called directly without appending scipts.
            </remarks>
            <seealso cref="T:System.Diagnostics.Process"/>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.PythonRunner.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DefinedRisk.PyRunnerX.PythonRunner"/> class to be used for creating virtual
            environments. Launcher (interpreter) is fixed for the lifetime of this instance.
            It is either "c:\windows\py.exe" or "/usr/bin/python3" and is evaluated from OS
            at runtime.
            </summary>
            <param name="timeout">Optional script timeout in msec. Defaults to 30000 (30 sec).</param>
            <exception cref="T:DefinedRisk.PyRunnerX.PythonRunnerException">
            Default launcher (interpreter) does not exist (invalid path). Use alternative constructor and specify
            launcher or interpreter directly.
            </exception>
            <seealso cref="P:DefinedRisk.PyRunnerX.PythonRunner.Timeout"/>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.PythonRunner.#ctor(System.String[],System.String[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DefinedRisk.PyRunnerX.PythonRunner"/> class.
            Launcher (interpreter) is fixed for the lifetime of this instance.
            It is either "c:\windows\py.exe" or "/usr/bin/python3" and is evaluated from OS
            at runtime. Both sets of arguments can be changed throughout the lifetime of this class.
            Note that for windows launcher usage is: "py [launcher-args] [python-args] script [script-args]".
            </summary>
            <param name="launcherArgs">Launcher specific arguments.</param>
            <param name="interpreterArgs">Interpreter specific arguments.</param>
            <param name="timeout">Optional script timeout in msec. Defaults to 10000 (10 sec).</param>
            <exception cref="T:DefinedRisk.PyRunnerX.PythonRunnerException">
            Default launcher (interpreter) does not exist (invalid path). Use alternative constructor and specify
            launcher or interpreter directly.
            </exception>
            <seealso cref="P:DefinedRisk.PyRunnerX.PythonRunner.Interpreter"/>
            <seealso cref="P:DefinedRisk.PyRunnerX.PythonRunner.Timeout"/>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.PythonRunner.#ctor(System.String[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DefinedRisk.PyRunnerX.PythonRunner"/> class.
            Launcher (interpreter) is fixed for the lifetime of this instance.
            It is either "c:\windows\py.exe" or "/usr/bin/python3" and is evaluated from OS
            at runtime. Launcher-args are ommitted however both sets of arguments can be changed throughout
            the lifetime of this class.
            Note that for windows launcher usage is: "py [launcher-args] [python-args] script [script-args]".
            </summary>
            <param name="interpreterArgs">Interpreter specific arguments.</param>
            <param name="timeout">Optional script timeout in msec. Defaults to 10000 (10 sec).</param>
            <exception cref="T:DefinedRisk.PyRunnerX.PythonRunnerException">
            Default launcher (interpreter) does not exist (invalid path). Use alternative constructor and specify
            launcher or interpreter directly.
            </exception>
            <seealso cref="P:DefinedRisk.PyRunnerX.PythonRunner.Interpreter"/>
            <seealso cref="P:DefinedRisk.PyRunnerX.PythonRunner.Timeout"/>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.PythonRunner.#ctor(System.String[],System.String[],System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DefinedRisk.PyRunnerX.PythonRunner"/> class.
            Launcher is fixed for the lifetime of this instance. Arguments can be changed.
            </summary>
            <param name="launcherArgs">Launcher specific arguments.</param>
            <param name="interpreterArgs">Interpreter specific arguments.</param>
            <param name="launcher">Full path to the Python launcher (interpreter).</param>
            <param name="timeout">Optional script timeout in msec. Defaults to 10000 (10 sec).</param>
            <exception cref="T:DefinedRisk.PyRunnerX.PythonRunnerException">
            Argument <paramref name="launcher"/> is an invalid path.
            </exception>
            <seealso cref="P:DefinedRisk.PyRunnerX.PythonRunner.Interpreter"/>
            <seealso cref="P:DefinedRisk.PyRunnerX.PythonRunner.Timeout"/>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.PythonRunner.#ctor(System.String[],System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DefinedRisk.PyRunnerX.PythonRunner"/> class.
            Interpreter is fixed for the lifetime of this instance. Arguments can be changed.
            </summary>
            <param name="interpreterArgs">Interpreter specific arguments.</param>
            <param name="interpreter">Path to the Python interpreter.</param>
            <param name="timeout">Optional script timeout in msec. Defaults to 10000 (10 sec).</param>
            <exception cref="T:System.IO.FileNotFoundException">
            Argument <paramref name="interpreter"/> is an invalid path.
            </exception>
            <seealso cref="P:DefinedRisk.PyRunnerX.PythonRunner.Interpreter"/>
            <seealso cref="P:DefinedRisk.PyRunnerX.PythonRunner.Timeout"/>
        </member>
        <member name="E:DefinedRisk.PyRunnerX.PythonRunner.Started">
            <summary>
            Occurs when a python process is started.
            </summary>
            <seealso cref="T:DefinedRisk.PyRunnerX.PyRunnerStartedEventArgs"/>
        </member>
        <member name="E:DefinedRisk.PyRunnerX.PythonRunner.Exited">
            <summary>
            Occurs when a python process has exited.
            </summary>
            <seealso cref="T:DefinedRisk.PyRunnerX.PyRunnerExitedEventArgs"/>
        </member>
        <member name="P:DefinedRisk.PyRunnerX.PythonRunner.Interpreter">
            <summary>
            Gets the full path to Python launcher or interpreter (eg. 'py.exe' or 'python3') for use by this instance.
            </summary>
        </member>
        <member name="P:DefinedRisk.PyRunnerX.PythonRunner.LauncherArgs">
            <summary>
            Gets or sets the Python launcher args for use by this instance. See 'py --help'
            for available launcher args.
            </summary>
        </member>
        <member name="P:DefinedRisk.PyRunnerX.PythonRunner.InterpreterArgs">
            <summary>
            Gets or sets the Python interpreter args for use by this instance. See 'python3 --help'
            for available interpreter args.
            </summary>
        </member>
        <member name="P:DefinedRisk.PyRunnerX.PythonRunner.Timeout">
            <summary>
            Gets or Sets the timeout for the underlying <see cref="T:System.Diagnostics.Process"/> component in msec.
            </summary>
            <remarks>
            See <see cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)"/> for details about this value.
            </remarks>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.PythonRunner.Execute(System.String,System.Object[])">
            <summary>
            Execute a Python script and return text that would have been printed
            to console.
            </summary>
            <param name="script">Full path to script file.</param>
            <param name="scriptArguments">Arguments to pass to script.</param>
            <returns>The text output of the script (re-directed from Stdout).</returns>
            <exception cref="T:DefinedRisk.PyRunnerX.PythonRunnerException">
            Thrown if error text was outputted by the script (this normally happens
            if an exception was raised by the script). <br/>
            -- or -- <br/>
            An unexpected error happened during script execution. In this case, the
            <see cref="P:System.Exception.InnerException"/> property contains the original
            <see cref="T:System.Exception"/>.
            </exception>
            <remarks>
            <b>Important:</b> Output to the error stream can also come from warnings, that are frequently
            outputted by various python package components. These warnings would result
            in an exception, therefore they must be switched off within the script by
            including the following statement: <c>warnings.simplefilter("ignore")</c>.
            </remarks>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.PythonRunner.ExecuteAsync(System.String,System.Threading.CancellationToken,System.Object[])">
            <summary>
            Runs the <see cref="M:DefinedRisk.PyRunnerX.PythonRunner.Execute(System.String,System.Object[])"/> method asynchronously using a <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <param name="script">Full path to script file.</param>
            <param name="ct">Task cancellation token.</param>
            <param name="scriptArguments">Arguments to pass to script.</param>
            <returns>
            An awaitable task, with the text output of the script as <see cref="P:System.Threading.Tasks.Task`1.Result"/>.
            </returns>
            <seealso cref="M:DefinedRisk.PyRunnerX.PythonRunner.Execute(System.String,System.Object[])"/>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.PythonRunner.Run">
            <summary>
            Run the Launcher or Interpreter with arguments (without Python Script).
            Use this to setup environments for example.
            </summary>
            <returns>The text output (re-directed from Stdout).</returns>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.PythonRunner.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Runs the <see cref="M:DefinedRisk.PyRunnerX.PythonRunner.Run"/> method asynchronously using a <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <returns>The text output (re-directed from Stdout).</returns>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.PythonRunner.GetImage(System.String,System.Object[])">
             <summary>
             Executes a Python script and returns the resulting image (mostly a chart that was produced
             by a Python package like e.g. <see href="https://matplotlib.org/">matplotlib</see>).
             </summary>
             <param name="script">Full path to the script to execute.</param>
             <param name="scriptArguments">Arguments that were passed to the script.</param>
             <returns>The <see cref="T:SixLabors.ImageSharp.Image"/> that the script creates.</returns>
             <exception cref="T:DefinedRisk.PyRunnerX.PythonRunnerException">
             Thrown if error text was outputted by the script (this normally happens
             if an exception was raised by the script). <br/>
             -- or -- <br/>
             An unexpected error happened during script execution. In this case, the
             <see cref="P:System.Exception.InnerException"/> property contains the original
             <see cref="T:System.Exception"/>.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Argument <paramref name="script"/> is null.
             </exception>
             <exception cref="T:System.IO.FileNotFoundException">
             Argument <paramref name="script"/> is an invalid path.
             </exception>
             <remarks>
             <para>
             In a 'normal' case, a Python script that creates a chart would show this chart
             with the help of Python's own backend, like this.
             <example>
             import matplotlib.pyplot as plt
             ...
             plt.show()
             </example>
             For the script to be used within the context of this <see cref="T:DefinedRisk.PyRunnerX.PythonRunner"/>,
             it should instead convert the image to a base64-encoded string and print this string
             to the console. The following code snippet shows a Python method (<c>print_figure</c>)
             that does this:
             <example>
             import io, sys, base64
            
             def print_figure(fig):
               buf = io.BytesIO()
               fig.savefig(buf, format='png')
               print(base64.b64encode(buf.getbuffer()))
            
             import matplotlib.pyplot as plt
             ...
             print_figure(plt.gcf()) # the gcf() method retrieves the current figure
             </example>
             </para><para>
             <b>Important:</b> Output to the error stream can also come from warnings, that are frequently
             outputted by various python package components. These warnings would result
             in an exception, therefore they must be switched off within the script by
             including the following statement: <c>warnings.simplefilter("ignore")</c>.
             </para>
             </remarks>
        </member>
        <member name="T:DefinedRisk.PyRunnerX.PythonRunnerException">
            <summary>
            The <see cref="T:System.Exception"/> type that is thrown by <see cref="T:DefinedRisk.PyRunnerX.PythonRunner"/> instances
            when an error occured during execution of a script.
            </summary>
        </member>
    </members>
</doc>
