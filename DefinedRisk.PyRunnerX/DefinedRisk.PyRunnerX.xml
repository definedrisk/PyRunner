<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DefinedRisk.PyRunnerX</name>
    </assembly>
    <members>
        <member name="T:DefinedRisk.PyRunnerX.IPyRunnerX">
            <summary>
            Intrface for the specialized runner of python and python scripts. Supports textual output
            as well as image output (work in progress), both synchronously and asynchronously.
            </summary>
        </member>
        <member name="P:DefinedRisk.PyRunnerX.IPyRunnerX.Interpreter">
            <summary>
            Gets the full path to the underlying Python launcher or interpreter (eg. 'py.exe' or 'python3')
            for use by this instance (set during construction and cannot be changed).
            </summary>
        </member>
        <member name="P:DefinedRisk.PyRunnerX.IPyRunnerX.LauncherArgs">
            <summary>
            Gets or sets the Python launcher args for use by this instance. See 'py --help'
            for available launcher args. Not necessary for Ubuntu linux.
            </summary>
        </member>
        <member name="P:DefinedRisk.PyRunnerX.IPyRunnerX.InterpreterArgs">
            <summary>
            Gets or sets the Python interpreter args for use by this instance. See 'python3 --help'
            for available interpreter args.
            </summary>
        </member>
        <member name="P:DefinedRisk.PyRunnerX.IPyRunnerX.WorkingDirectory">
            <summary>
            Gets or Sets the optional working directory used by the process. This is often necessary
            when subscripts and modules are being called.
            </summary>
        </member>
        <member name="P:DefinedRisk.PyRunnerX.IPyRunnerX.Timeout">
            <summary>
            Gets or Sets the timeout for the underlying process in msec.
            </summary>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.IPyRunnerX.CreateVirtualEnvAsync(System.Threading.CancellationToken,System.String)">
            <summary>
            Use the exisiting interpreter (launcher) to create a virtual environment in the base-directory if
            it does not already exist. Then return a new <see cref="T:DefinedRisk.PyRunnerX.PythonRunner"/> with interpreter setup
            to use this virtual environment.
            Note: on Debian/Ubuntu systems, you need to install the python3-venv package before this can
            be used (sudo apt install python3.8-venv). On Windows 10 use the default installer provided
            from python.org to ensure the venv module is available for use by this function.
            </summary>
            <seealso aref="https://docs.python.org/3/tutorial/venv.html"/>
            <param name="ct">CancellationToken.</param>
            <param name="requirements">Optional path to <c>requirements.txt</c> file.</param>
            <returns>A python runner with interpreter setup to use the virtual environment.</returns>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.IPyRunnerX.GetEnvironmentDirectory">
            <summary>
            Gets the directory of the interpreter.
            </summary>
            <returns>Directory name.</returns>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.IPyRunnerX.InstallRequirementsAsync(System.Threading.CancellationToken,System.String)">
            <summary>
            Install requirements.txt into this environment.
            </summary>
            <param name="ct">Cancellation token.</param>
            <param name="requirements">Path to requirements.txt.</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.IPyRunnerX.DeleteEnvironment">
            <summary>
            Delete the virtual environment if it exists.
            </summary>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.IPyRunnerX.Execute(System.String,System.Object[])">
            <summary>
            Execute a Python script and return text that would have been printed
            to console.
            </summary>
            <param name="script">Full path to script file.</param>
            <param name="scriptArguments">Arguments to pass to script.</param>
            <returns>The text output of the script (re-directed from StdOut).</returns>
            <exception cref="T:DefinedRisk.PyRunnerX.PythonRunnerException">
            Thrown if error text was outputted by the script (this normally happens
            if an exception was raised by the script). <br/>
            -- or -- <br/>
            An unexpected error happened during script execution. In this case, the
            <see cref="P:System.Exception.InnerException"/> property contains the original
            <see cref="T:System.Exception"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Argument <paramref name="script"/> is null.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            Argument <paramref name="script"/> is an invalid path.
            </exception>
            <remarks>
            <b>Important:</b> Output to the error stream can also come from warnings, that are frequently
            outputted by various python package components. These warnings would result
            in an exception, therefore they should be switched off within the script by
            including the following statement: <c>warnings.simplefilter("ignore")</c>.
            </remarks>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.IPyRunnerX.ExecuteAsync(System.Threading.CancellationToken,System.String,System.Object[])">
            <summary>
            Runs the <see cref="M:DefinedRisk.PyRunnerX.IPyRunnerX.Execute(System.String,System.Object[])"/> method asynchronously using a <see cref="T:System.Threading.CancellationToken"/>.
            </summary>
            <param name="ct">Task cancellation token.</param>
            <param name="script">Full path to script file.</param>
            <param name="scriptArguments">Arguments to pass to script.</param>
            <exception cref="T:System.ArgumentNullException">
            Argument <paramref name="script"/> is null.
            </exception>
            <exception cref="T:System.IO.FileNotFoundException">
            Argument <paramref name="script"/> is an invalid path.
            </exception>
            <returns>
            An awaitable task, with the text output of the script as <see cref="P:System.Threading.Tasks.Task`1.Result"/>.
            </returns>
            <seealso cref="M:DefinedRisk.PyRunnerX.IPyRunnerX.Execute(System.String,System.Object[])"/>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.IPyRunnerX.Run">
            <summary>
            Run the Launcher or Interpreter with arguments (without Python Script).
            Use this to setup environments for example.
            </summary>
            <returns>The text output (re-directed from StdOut).</returns>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.IPyRunnerX.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Runs the <see cref="M:DefinedRisk.PyRunnerX.IPyRunnerX.Run"/> method asynchronously using a <see cref="T:System.Threading.CancellationToken"/>.
            Cancellation can only be triggered before the process is started.
            After that time the cancellation token has no effect.
            </summary>
            <param name="ct">Cancellationtoken.</param>
            <returns>The text output (re-directed from Stdout).</returns>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.IPyRunnerX.GetImage(System.String,System.Object[])">
             <summary>
             Executes a Python script and returns the resulting image (mostly a chart that was produced
             by a Python package like e.g. <see href="https://matplotlib.org/">matplotlib</see>).
             \TEST Image conversion functionality.
             </summary>
             <param name="script">Full path to the script to execute.</param>
             <param name="scriptArguments">Arguments that were passed to the script.</param>
             <returns>The <see cref="T:SixLabors.ImageSharp.Image"/> that the script creates.</returns>
             <exception cref="T:DefinedRisk.PyRunnerX.PythonRunnerException">
             Thrown if error text was outputted by the script (this normally happens
             if an exception was raised by the script). <br/>
             -- or -- <br/>
             An unexpected error happened during script execution. In this case, the
             <see cref="P:System.Exception.InnerException"/> property contains the original
             <see cref="T:System.Exception"/>.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Argument <paramref name="script"/> is null.
             </exception>
             <exception cref="T:System.IO.FileNotFoundException">
             Argument <paramref name="script"/> is an invalid path.
             </exception>
             <remarks>
             <para>
             In a 'normal' case, a Python script that creates a chart would show this chart
             with the help of Python's own backend, like this.
             <example>
             import matplotlib.pyplot as plt
             ...
             plt.show()
             </example>
             For the script to be used within the context of this <see cref="T:DefinedRisk.PyRunnerX.PythonRunner"/>,
             it should instead convert the image to a base64-encoded string and print this string
             to the console. The following code snippet shows a Python method (<c>print_figure</c>)
             that does this:
             <example>
             import io, sys, base64
            
             def print_figure(fig):
               buf = io.BytesIO()
               fig.savefig(buf, format='png')
               print(base64.b64encode(buf.getbuffer()))
            
             import matplotlib.pyplot as plt
             ...
             print_figure(plt.gcf()) # the gcf() method retrieves the current figure
             </example>
             </para><para>
             <b>Important:</b> Output to the error stream can also come from warnings, that are frequently
             outputted by various python package components. These warnings would result
             in an exception, therefore they must be switched off within the script by
             including the following statement: <c>warnings.simplefilter("ignore")</c>.
             </para>
             </remarks>
        </member>
        <member name="T:DefinedRisk.PyRunnerX.PythonBase64ImageConverter">
            <summary>
            Helper class for converting a base64 string (as printed by
            python script) to a <see cref="T:SixLabors.ImageSharp.Image"/> image.
            </summary>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.PythonBase64ImageConverter.FromPythonBase64String(System.String)">
            <summary>
            Converts a base64 string (as printed by python script) to an ImageSharp <see cref="T:SixLabors.ImageSharp.Image"/>.
            </summary>
        </member>
        <member name="T:DefinedRisk.PyRunnerX.PythonRunner">
            <summary>
            A specialized runner for python and python scripts. Supports textual output
            as well as image output (work in progress), both synchronously and asynchronously.
            </summary>
            <remarks>
            You can think of <see cref="T:DefinedRisk.PyRunnerX.PythonRunner"/> instances as <see cref="T:System.Diagnostics.Process"/>
            instances that were specialized for Python and Python scripts. The python interpreter
            (and launcher for windows) can also be called directly without appending scipts.
            </remarks>
            <seealso cref="T:System.Diagnostics.Process"/>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.PythonRunner.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DefinedRisk.PyRunnerX.PythonRunner"/> class to be used for creating virtual
            environments using default global python installation (either "c:\windows\py.exe" or "/usr/bin/python3"
            evaluated from OS (windows or linux) at runtime.
            </summary>
            <param name="timeout">Optional script timeout in msec. Defaults to <see cref="F:DefinedRisk.PyRunnerX.PythonRunner.DEFAULTTIMEOUT"/>.</param>
            <exception cref="T:DefinedRisk.PyRunnerX.PythonRunnerException">
            Default launcher (interpreter) does not exist (invalid path). Use alternative constructor and specify
            launcher (interpreter) directly.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Timeout should be greater than 0.
            </exception>
            <seealso cref="P:DefinedRisk.PyRunnerX.PythonRunner.Timeout"/>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.PythonRunner.#ctor(System.String,System.String[],System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DefinedRisk.PyRunnerX.PythonRunner"/> class.
            Interpreter (launcher) is fixed for the lifetime of this instance. Arguments can be changed.
            </summary>
            <param name="interpreter">Path to the Python interpreter (launcher).</param>
            <param name="interpreterArgs">Optional interpreter specific arguments.</param>
            <param name="timeout">Optional script timeout in msec. Defaults to <see cref="F:DefinedRisk.PyRunnerX.PythonRunner.DEFAULTTIMEOUT"/>.</param>
            <exception cref="T:DefinedRisk.PyRunnerX.PythonRunnerException">
            Argument <paramref name="interpreter"/> is an invalid path.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Timeout should be greater than 0.
            </exception>
            <seealso cref="P:DefinedRisk.PyRunnerX.PythonRunner.Interpreter"/>
            <seealso cref="P:DefinedRisk.PyRunnerX.PythonRunner.InterpreterArgs"/>
            <seealso cref="P:DefinedRisk.PyRunnerX.PythonRunner.Timeout"/>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.PythonRunner.#ctor(System.String[],System.String[],System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DefinedRisk.PyRunnerX.PythonRunner"/> class. The optional parameter
            <c>launcher</c> (interpreter) is fixed for the lifetime of this instance and
            defaults to either <c>c:\windows\py.exe</c> or <c>/usr/bin/python3</c> (evaluated from OS
            at runtime). Both sets of arguments can be changed throughout the lifetime of this class.
            Note that for windows launcher usage is "<c>py [launcher-args] [python-args] script [script-args]</c>".
            When calling this function on Ubuntu Linux the args will effectively be chained together so it would
            make more sense to call the constructor with a single set of <c>interpreterArgs</c> in that case.
            </summary>
            <param name="launcherArgs">Launcher specific arguments.</param>
            <param name="interpreterArgs">Optional interpreter specific arguments.</param>
            <param name="launcher">Optional full path to the Python launcher (interpreter). Othwerwise
            uses the default global python installation (either "c:\windows\py.exe" or "/usr/bin/python3"
            evaluated from OS (windows or linux) at runtime.</param>
            <param name="timeout">Optional script timeout in msec. Defaults to <see cref="F:DefinedRisk.PyRunnerX.PythonRunner.DEFAULTTIMEOUT"/>.</param>
            <exception cref="T:DefinedRisk.PyRunnerX.PythonRunnerException">
            Launcher (interpreter) <paramref name="launcher"/> is an invalid path.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Timeout should be greater than 0.
            </exception>
            <seealso cref="P:DefinedRisk.PyRunnerX.PythonRunner.LauncherArgs"/>
            <seealso cref="P:DefinedRisk.PyRunnerX.PythonRunner.InterpreterArgs"/>
            <seealso cref="P:DefinedRisk.PyRunnerX.PythonRunner.Interpreter"/>
            <seealso cref="P:DefinedRisk.PyRunnerX.PythonRunner.Timeout"/>
        </member>
        <member name="E:DefinedRisk.PyRunnerX.PythonRunner.Started">
            <summary>
            Occurs when a python process is started.
            </summary>
            <seealso cref="T:DefinedRisk.PyRunnerX.PyRunnerStartedEventArgs"/>
        </member>
        <member name="E:DefinedRisk.PyRunnerX.PythonRunner.Exited">
            <summary>
            Occurs when a python process has exited.
            </summary>
            <seealso cref="T:DefinedRisk.PyRunnerX.PyRunnerExitedEventArgs"/>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.PythonRunner.GetVirtualEnvironment">
            <summary>
            Get a PythonRunner with launcher set to virtual environment.
            </summary>
            <returns>PythonRunner with launcher set to virtual environment or NULL if
            environment does not exist.</returns>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.PythonRunner.GetSystemEnvironment">
            <summary>
            Get a PythonRunner with launcher set to global default environment.
            </summary>
            <returns>PythonRunner with launcher set to default system launcher (interpreter)
            or NULL if not found.</returns>
        </member>
        <member name="M:DefinedRisk.PyRunnerX.PythonRunner.FindExePath(System.String,System.Boolean)">
            <summary>
            Expands environment variables and locates the exe with either fully qualifed or relative directory.
            If unqualified then searches the the evironment's path after working directory.
            </summary>
            <param name="exe">The name of the executable file.</param>
            <param name="recursive">Optional recursive seach sub-folders (default is false).</param>
            <returns>The fully-qualified path to the file.</returns>
            <exception cref="T:System.IO.FileNotFoundException">Raised when the exe was not found.</exception>
        </member>
        <member name="T:DefinedRisk.PyRunnerX.PythonRunnerException">
            <summary>
            The <see cref="T:System.Exception"/> type that is thrown by <see cref="T:DefinedRisk.PyRunnerX.PythonRunner"/> instances.
            </summary>
        </member>
        <member name="T:DefinedRisk.PyRunnerX.PythonScriptException">
            <summary>
            The <see cref="T:System.Exception"/> type that is thrown by <see cref="T:DefinedRisk.PyRunnerX.PythonRunner"/> instances
            when ProcessErrorData is received ie. errors occuring during exceution of the python script.
            </summary>
        </member>
    </members>
</doc>
